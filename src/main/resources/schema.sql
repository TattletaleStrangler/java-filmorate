DROP TABLE IF EXISTS USER_LIKES;
DROP TABLE IF EXISTS FRIENDS;
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS film_genres;
DROP TABLE IF EXISTS FILM;
DROP TABLE IF EXISTS GENRE;
DROP TABLE IF EXISTS MPA_RATING;

CREATE TABLE IF NOT EXISTS genre (
    genre_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name varchar(50) NOT NULL
);

CREATE TABLE IF NOT EXISTS mpa_rating (
	rating_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	name varchar(10) NOT NULL
);

CREATE TABLE IF NOT EXISTS film (
    film_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL,
    description varchar(200) NOT NULL,
    releaseDate DATE NOT NULL,
    duration INTEGER NOT NULL,
    mpa_rating_id INTEGER REFERENCES mpa_rating(rating_id)	
);

CREATE TABLE IF NOT EXISTS film_genres (
    film_id INTEGER,
    genre_id INTEGER,
    FOREIGN KEY (film_id)  REFERENCES film (film_id) ON DELETE CASCADE,
    FOREIGN KEY (genre_id)  REFERENCES genre (genre_id)  ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name varchar(100),
    login varchar(100) NOT NULL,
    email varchar(100) NOT NULL,
    birthday DATE NOT NULL
);

CREATE TABLE IF NOT EXISTS friends(
--	friends_id INTEGER,
    user_id INTEGER,
    friend_id INTEGER,
--    status INTEGER,
    FOREIGN KEY (user_id)  REFERENCES users (user_id),
    FOREIGN KEY (friend_id)  REFERENCES users (user_id)
);

CREATE TABLE IF NOT EXISTS user_likes (
    film_id INTEGER,
    user_id INTEGER,
    FOREIGN KEY (film_id)  REFERENCES film (film_id) ON DELETE CASCADE,
    FOREIGN KEY (user_id)  REFERENCES users (user_id) ON DELETE CASCADE
);

--select * from mpa_rating;
--select * from genres;